// source: proto/actions_cache_gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.cycloudio.gateway.Chunk', null, global);
goog.exportSymbol('proto.cycloudio.gateway.ObjectInfo', null, global);
goog.exportSymbol('proto.cycloudio.gateway.RestoreCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.RestoreCacheResponse', null, global);
goog.exportSymbol('proto.cycloudio.gateway.UploadCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.UploadCacheRequest.ValueCase', null, global);
goog.exportSymbol('proto.cycloudio.gateway.UploadCacheResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.ObjectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.ObjectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.ObjectInfo.displayName = 'proto.cycloudio.gateway.ObjectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.Chunk.displayName = 'proto.cycloudio.gateway.Chunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.UploadCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cycloudio.gateway.UploadCacheRequest.oneofGroups_);
};
goog.inherits(proto.cycloudio.gateway.UploadCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.UploadCacheRequest.displayName = 'proto.cycloudio.gateway.UploadCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.UploadCacheResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.UploadCacheResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.UploadCacheResponse.displayName = 'proto.cycloudio.gateway.UploadCacheResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.RestoreCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cycloudio.gateway.RestoreCacheRequest.repeatedFields_, null);
};
goog.inherits(proto.cycloudio.gateway.RestoreCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.RestoreCacheRequest.displayName = 'proto.cycloudio.gateway.RestoreCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.RestoreCacheResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.RestoreCacheResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.RestoreCacheResponse.displayName = 'proto.cycloudio.gateway.RestoreCacheResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.ObjectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.ObjectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.ObjectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    githubUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    githubRepository: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.ObjectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.ObjectInfo;
  return proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.ObjectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubRepository(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.ObjectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGithubUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGithubRepository();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string github_url = 1;
 * @return {string}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.getGithubUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.ObjectInfo} returns this
 */
proto.cycloudio.gateway.ObjectInfo.prototype.setGithubUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string github_repository = 2;
 * @return {string}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.getGithubRepository = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.ObjectInfo} returns this
 */
proto.cycloudio.gateway.ObjectInfo.prototype.setGithubRepository = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.ObjectInfo} returns this
 */
proto.cycloudio.gateway.ObjectInfo.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.Chunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.Chunk}
 */
proto.cycloudio.gateway.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.Chunk;
  return proto.cycloudio.gateway.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.Chunk}
 */
proto.cycloudio.gateway.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cycloudio.gateway.Chunk.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cycloudio.gateway.Chunk.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.Chunk.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cycloudio.gateway.Chunk} returns this
 */
proto.cycloudio.gateway.Chunk.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 position = 2;
 * @return {number}
 */
proto.cycloudio.gateway.Chunk.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cycloudio.gateway.Chunk} returns this
 */
proto.cycloudio.gateway.Chunk.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cycloudio.gateway.UploadCacheRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cycloudio.gateway.UploadCacheRequest.ValueCase = {
  VALUE_NOT_SET: 0,
  META: 1,
  CHUNK: 2
};

/**
 * @return {proto.cycloudio.gateway.UploadCacheRequest.ValueCase}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.getValueCase = function() {
  return /** @type {proto.cycloudio.gateway.UploadCacheRequest.ValueCase} */(jspb.Message.computeOneofCase(this, proto.cycloudio.gateway.UploadCacheRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.UploadCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.UploadCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f),
    chunk: (f = msg.getChunk()) && proto.cycloudio.gateway.Chunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest}
 */
proto.cycloudio.gateway.UploadCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.UploadCacheRequest;
  return proto.cycloudio.gateway.UploadCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.UploadCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest}
 */
proto.cycloudio.gateway.UploadCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new proto.cycloudio.gateway.Chunk;
      reader.readMessage(value,proto.cycloudio.gateway.Chunk.deserializeBinaryFromReader);
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.UploadCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.UploadCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cycloudio.gateway.Chunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectInfo meta = 1;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 1));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.UploadCacheRequest} returns this
*/
proto.cycloudio.gateway.UploadCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.cycloudio.gateway.UploadCacheRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest} returns this
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Chunk chunk = 2;
 * @return {?proto.cycloudio.gateway.Chunk}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.getChunk = function() {
  return /** @type{?proto.cycloudio.gateway.Chunk} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.Chunk, 2));
};


/**
 * @param {?proto.cycloudio.gateway.Chunk|undefined} value
 * @return {!proto.cycloudio.gateway.UploadCacheRequest} returns this
*/
proto.cycloudio.gateway.UploadCacheRequest.prototype.setChunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.cycloudio.gateway.UploadCacheRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest} returns this
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.clearChunk = function() {
  return this.setChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.UploadCacheResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.UploadCacheResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.UploadCacheResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.UploadCacheResponse}
 */
proto.cycloudio.gateway.UploadCacheResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.UploadCacheResponse;
  return proto.cycloudio.gateway.UploadCacheResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.UploadCacheResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.UploadCacheResponse}
 */
proto.cycloudio.gateway.UploadCacheResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.UploadCacheResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.UploadCacheResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.UploadCacheResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cycloudio.gateway.RestoreCacheRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.RestoreCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.RestoreCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f),
    restoreKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest}
 */
proto.cycloudio.gateway.RestoreCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.RestoreCacheRequest;
  return proto.cycloudio.gateway.RestoreCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.RestoreCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest}
 */
proto.cycloudio.gateway.RestoreCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRestoreKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.RestoreCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.RestoreCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getRestoreKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional ObjectInfo meta = 1;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 1));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
*/
proto.cycloudio.gateway.RestoreCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string restore_keys = 2;
 * @return {!Array<string>}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.getRestoreKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.setRestoreKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.addRestoreKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.clearRestoreKeysList = function() {
  return this.setRestoreKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.RestoreCacheResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.RestoreCacheResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    preSignedUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse}
 */
proto.cycloudio.gateway.RestoreCacheResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.RestoreCacheResponse;
  return proto.cycloudio.gateway.RestoreCacheResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.RestoreCacheResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse}
 */
proto.cycloudio.gateway.RestoreCacheResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSignedUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.RestoreCacheResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.RestoreCacheResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreSignedUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pre_signed_url = 1;
 * @return {string}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.getPreSignedUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse} returns this
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.setPreSignedUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.cycloudio.gateway);

// source: proto/actions_cache_gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.cycloudio.gateway.AbortMultipartUploadCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.ObjectInfo', null, global);
goog.exportSymbol('proto.cycloudio.gateway.RestoreCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.RestoreCacheResponse', null, global);
goog.exportSymbol('proto.cycloudio.gateway.StartMultipartUploadCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.StartMultipartUploadCacheResponse', null, global);
goog.exportSymbol('proto.cycloudio.gateway.UploadCacheRequest', null, global);
goog.exportSymbol('proto.cycloudio.gateway.UploadCacheResponse', null, global);
goog.exportSymbol('proto.cycloudio.gateway.UploadedParts', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.ObjectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.ObjectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.ObjectInfo.displayName = 'proto.cycloudio.gateway.ObjectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.UploadedParts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.UploadedParts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.UploadedParts.displayName = 'proto.cycloudio.gateway.UploadedParts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.StartMultipartUploadCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.StartMultipartUploadCacheRequest.displayName = 'proto.cycloudio.gateway.StartMultipartUploadCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cycloudio.gateway.StartMultipartUploadCacheResponse.repeatedFields_, null);
};
goog.inherits(proto.cycloudio.gateway.StartMultipartUploadCacheResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.StartMultipartUploadCacheResponse.displayName = 'proto.cycloudio.gateway.StartMultipartUploadCacheResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.repeatedFields_, null);
};
goog.inherits(proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.displayName = 'proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.UploadCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.UploadCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.UploadCacheRequest.displayName = 'proto.cycloudio.gateway.UploadCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.UploadCacheResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.UploadCacheResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.UploadCacheResponse.displayName = 'proto.cycloudio.gateway.UploadCacheResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.RestoreCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cycloudio.gateway.RestoreCacheRequest.repeatedFields_, null);
};
goog.inherits(proto.cycloudio.gateway.RestoreCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.RestoreCacheRequest.displayName = 'proto.cycloudio.gateway.RestoreCacheRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.RestoreCacheResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.RestoreCacheResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.RestoreCacheResponse.displayName = 'proto.cycloudio.gateway.RestoreCacheResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cycloudio.gateway.AbortMultipartUploadCacheRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.displayName = 'proto.cycloudio.gateway.AbortMultipartUploadCacheRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.ObjectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.ObjectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.ObjectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    githubUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    githubRepository: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.ObjectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.ObjectInfo;
  return proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.ObjectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGithubRepository(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.ObjectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGithubUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGithubRepository();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string github_url = 1;
 * @return {string}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.getGithubUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.ObjectInfo} returns this
 */
proto.cycloudio.gateway.ObjectInfo.prototype.setGithubUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string github_repository = 2;
 * @return {string}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.getGithubRepository = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.ObjectInfo} returns this
 */
proto.cycloudio.gateway.ObjectInfo.prototype.setGithubRepository = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.cycloudio.gateway.ObjectInfo.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.ObjectInfo} returns this
 */
proto.cycloudio.gateway.ObjectInfo.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.UploadedParts.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.UploadedParts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.UploadedParts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadedParts.toObject = function(includeInstance, msg) {
  var f, obj = {
    partNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eTag: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.UploadedParts}
 */
proto.cycloudio.gateway.UploadedParts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.UploadedParts;
  return proto.cycloudio.gateway.UploadedParts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.UploadedParts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.UploadedParts}
 */
proto.cycloudio.gateway.UploadedParts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setETag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.UploadedParts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.UploadedParts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.UploadedParts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadedParts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartNumber();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getETag();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 part_number = 1;
 * @return {number}
 */
proto.cycloudio.gateway.UploadedParts.prototype.getPartNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cycloudio.gateway.UploadedParts} returns this
 */
proto.cycloudio.gateway.UploadedParts.prototype.setPartNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string e_tag = 2;
 * @return {string}
 */
proto.cycloudio.gateway.UploadedParts.prototype.getETag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.UploadedParts} returns this
 */
proto.cycloudio.gateway.UploadedParts.prototype.setETag = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.StartMultipartUploadCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f),
    totalPart: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.StartMultipartUploadCacheRequest;
  return proto.cycloudio.gateway.StartMultipartUploadCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalPart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.StartMultipartUploadCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getTotalPart();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional ObjectInfo meta = 1;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 1));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest} returns this
*/
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 total_part = 2;
 * @return {number}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.getTotalPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheRequest.prototype.setTotalPart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.StartMultipartUploadCacheResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uploadKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contentType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    preSignedUrlsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.StartMultipartUploadCacheResponse;
  return proto.cycloudio.gateway.StartMultipartUploadCacheResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPreSignedUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.StartMultipartUploadCacheResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUploadKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreSignedUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string upload_id = 1;
 * @return {string}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.getUploadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.setUploadId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string upload_key = 2;
 * @return {string}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.getUploadKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.setUploadKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string content_type = 3;
 * @return {string}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.setContentType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string pre_signed_urls = 4;
 * @return {!Array<string>}
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.getPreSignedUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.setPreSignedUrlsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.addPreSignedUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cycloudio.gateway.StartMultipartUploadCacheResponse} returns this
 */
proto.cycloudio.gateway.StartMultipartUploadCacheResponse.prototype.clearPreSignedUrlsList = function() {
  return this.setPreSignedUrlsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uploadKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    partsList: jspb.Message.toObjectList(msg.getPartsList(),
    proto.cycloudio.gateway.UploadedParts.toObject, includeInstance),
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest;
  return proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadKey(value);
      break;
    case 3:
      var value = new proto.cycloudio.gateway.UploadedParts;
      reader.readMessage(value,proto.cycloudio.gateway.UploadedParts.deserializeBinaryFromReader);
      msg.addParts(value);
      break;
    case 4:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUploadKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.cycloudio.gateway.UploadedParts.serializeBinaryToWriter
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string upload_id = 1;
 * @return {string}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.getUploadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.setUploadId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string upload_key = 2;
 * @return {string}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.getUploadKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.setUploadKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated UploadedParts parts = 3;
 * @return {!Array<!proto.cycloudio.gateway.UploadedParts>}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.getPartsList = function() {
  return /** @type{!Array<!proto.cycloudio.gateway.UploadedParts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cycloudio.gateway.UploadedParts, 3));
};


/**
 * @param {!Array<!proto.cycloudio.gateway.UploadedParts>} value
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} returns this
*/
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.setPartsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cycloudio.gateway.UploadedParts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cycloudio.gateway.UploadedParts}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.addParts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cycloudio.gateway.UploadedParts, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.clearPartsList = function() {
  return this.setPartsList([]);
};


/**
 * optional ObjectInfo meta = 4;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 4));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} returns this
*/
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.CompleteMultipartUploadCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.UploadCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.UploadCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest}
 */
proto.cycloudio.gateway.UploadCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.UploadCacheRequest;
  return proto.cycloudio.gateway.UploadCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.UploadCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest}
 */
proto.cycloudio.gateway.UploadCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.UploadCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.UploadCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional ObjectInfo meta = 1;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 1));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.UploadCacheRequest} returns this
*/
proto.cycloudio.gateway.UploadCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.UploadCacheRequest} returns this
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.UploadCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.UploadCacheResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.UploadCacheResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.UploadCacheResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    preSignedUrl: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.UploadCacheResponse}
 */
proto.cycloudio.gateway.UploadCacheResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.UploadCacheResponse;
  return proto.cycloudio.gateway.UploadCacheResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.UploadCacheResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.UploadCacheResponse}
 */
proto.cycloudio.gateway.UploadCacheResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSignedUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.UploadCacheResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.UploadCacheResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.UploadCacheResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.UploadCacheResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreSignedUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pre_signed_url = 1;
 * @return {string}
 */
proto.cycloudio.gateway.UploadCacheResponse.prototype.getPreSignedUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.UploadCacheResponse} returns this
 */
proto.cycloudio.gateway.UploadCacheResponse.prototype.setPreSignedUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cycloudio.gateway.RestoreCacheRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.RestoreCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.RestoreCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f),
    restoreKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest}
 */
proto.cycloudio.gateway.RestoreCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.RestoreCacheRequest;
  return proto.cycloudio.gateway.RestoreCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.RestoreCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest}
 */
proto.cycloudio.gateway.RestoreCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRestoreKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.RestoreCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.RestoreCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
  f = message.getRestoreKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional ObjectInfo meta = 1;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 1));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
*/
proto.cycloudio.gateway.RestoreCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string restore_keys = 2;
 * @return {!Array<string>}
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.getRestoreKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.setRestoreKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.addRestoreKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cycloudio.gateway.RestoreCacheRequest} returns this
 */
proto.cycloudio.gateway.RestoreCacheRequest.prototype.clearRestoreKeysList = function() {
  return this.setRestoreKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.RestoreCacheResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.RestoreCacheResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    preSignedUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cacheKey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse}
 */
proto.cycloudio.gateway.RestoreCacheResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.RestoreCacheResponse;
  return proto.cycloudio.gateway.RestoreCacheResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.RestoreCacheResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse}
 */
proto.cycloudio.gateway.RestoreCacheResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreSignedUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacheKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.RestoreCacheResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.RestoreCacheResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.RestoreCacheResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreSignedUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCacheKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pre_signed_url = 1;
 * @return {string}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.getPreSignedUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse} returns this
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.setPreSignedUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cache_key = 2;
 * @return {string}
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.getCacheKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.RestoreCacheResponse} returns this
 */
proto.cycloudio.gateway.RestoreCacheResponse.prototype.setCacheKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uploadId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uploadKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    meta: (f = msg.getMeta()) && proto.cycloudio.gateway.ObjectInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cycloudio.gateway.AbortMultipartUploadCacheRequest;
  return proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadKey(value);
      break;
    case 3:
      var value = new proto.cycloudio.gateway.ObjectInfo;
      reader.readMessage(value,proto.cycloudio.gateway.ObjectInfo.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUploadId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUploadKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cycloudio.gateway.ObjectInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string upload_id = 1;
 * @return {string}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.getUploadId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.setUploadId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string upload_key = 2;
 * @return {string}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.getUploadKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.setUploadKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ObjectInfo meta = 3;
 * @return {?proto.cycloudio.gateway.ObjectInfo}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.getMeta = function() {
  return /** @type{?proto.cycloudio.gateway.ObjectInfo} */ (
    jspb.Message.getWrapperField(this, proto.cycloudio.gateway.ObjectInfo, 3));
};


/**
 * @param {?proto.cycloudio.gateway.ObjectInfo|undefined} value
 * @return {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} returns this
*/
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cycloudio.gateway.AbortMultipartUploadCacheRequest} returns this
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cycloudio.gateway.AbortMultipartUploadCacheRequest.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.cycloudio.gateway);
